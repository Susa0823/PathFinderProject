# https://testdriven.io/blog/deploying-django-to-digitalocean-with-docker-and-gitlab/
image:
  name: docker:latest
  entrypoint: [""]

services:
  - docker:dind

variables:
  CI_IMG: '"${CI_REGISTRY_IMAGE}:latest"'
  TP_URL: "${CI_PROJECT_NAMESPACE}.bham.team"
  TP_CONTACT: "${GITLAB_USER_EMAIL}"
  # PSQL_USER: '${PSQL_USER}'
  # PSQL_PASSWORD: '${PSQL_PASSWORD}'
  # PSQL_DB: '${PSQL_DB}'
  # PSQL_HOST: '${PSQL_HOST}'
  DOCKER_HOST: tcp://docker:2375
  # PSQL_PORT: '${PSQL_PORT}'
cache:
  key: "$CI_COMMIT_REF_NAME"

before_script:
  - export IMAGE=$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME
  - export WEB_IMAGE=$IMAGE:web
  - apk add --no-cache bash
  - apk add --no-cache python3
  - apk add --no-cache python3-dev
  - apk add --no-cache postgresql-client
  - apk add --no-cache postgresql-dev
  - apk add --no-cache build-base
  - apk add --no-cache curl
  - python3 -m venv venv
  - source venv/bin/activate
  - pip install --upgrade pip
  - pip install -r requirements.txt

stages:
  - test
  - build
  - deploy

test_stage:
  stage: test
  script:
    - echo "Running fictional test suite..."
    - python manage.py test
  variables:
    DOCKER_HOST: tcp://docker:2375/
#   DOCKER_DRIVER: overlay2

build_stage:
  stage: build
  # before_script:
  #   - export IMAGE=$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME
  #   - export WEB_IMAGE=$IMAGE:web
  #   - export NGINX_IMAGE=$IMAGE:nginx
  services:
    - docker:dind
  variables:
    DOCKER_HOST: "tcp://docker:2375/"
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  script:
    - echo "pushing ${CI_REGISTRY_IMAGE} ${CI_REGISTRY_USER} ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE -f Dockerfile .
    - docker push $CI_REGISTRY_IMAGE
    # - docker pull $IMAGE:web || true
    # - docker build --cache-from $WEB_IMAGE -t $WEB_IMAGE -f Dockerfile .
    # - docker-compose -f docker-compose.yml build
    # - docker push $WEB_IMAGE:web
    # ensure server is up
    # - curl -sSf http://localhost:8000 > /dev/null && echo "Server is Up" &
    # - pkill python
    # - deactivate
deploy_stage:
  image: alpine:latest
  stage: deploy
  when: on_success
  before_script:
    - chmod og=$RSA
    - apk update && apk add openssh-client
    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker compose -f docker-compose.yml down || true"
    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker rm -f $(docker ps -a -q) || true"
    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker volume rm $(docker volume ls -q) || true"
    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker pull $CI_REGISTRY_IMAGE:latest"
  script:
    - scp -o StrictHostKeyChecking=no -i $RSA -r . $VM_USER@$VM:~/team-project-deployment
    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker compose -f docker-compose.yml up -d"
# - echo "$RSA" > ~/.ssh/id_rsa
# - cat ~/.ssh/id_rsa
# - chmod 700 ~/.ssh/id_rsa
# - eval $(ssh-agent -s)
# - ssh-add ~/.ssh/id_rsa
# - ssh-keyscan -H 'git.cs.bham.ac.uk/' >> ~/.ssh/known_hosts
# - chmod +x deploy.sh
# - scp -o StrictHostKeyChecking=no -r ./docker-compose.yml root@143.198.222.14:/PathFinder
# - bash ./deploy.sh
