# write a ci cd file for gitlab given that the project is using psql with username and password in settings.py and using docker
# https://testdriven.io/blog/deploying-django-to-digitalocean-with-docker-and-gitlab/
image:
  name: docker:latest
  entrypoint: [""]

variables:
  CI_IMG: '"${CI_REGISTRY_IMAGE}:latest"'
  TP_URL: "${CI_PROJECT_NAMESPACE}.bham.team"
  TP_CONTACT: "${GITLAB_USER_EMAIL}"
  # PSQL_USER: '${PSQL_USER}'
  # PSQL_PASSWORD: '${PSQL_PASSWORD}'
  # PSQL_DB: '${PSQL_DB}'
  # PSQL_HOST: '${PSQL_HOST}'
  # PSQL_PORT: '${PSQL_PORT}'
cache:
  key: "$CI_COMMIT_REF_NAME"

before_script:
  - apk add --no-cache python3
  - apk add --no-cache python3-dev
  - apk add --no-cache postgresql-client
  - apk add --no-cache postgresql-dev
  - apk add --no-cache build-base
  - python3 -m venv venv
  - source venv/bin/activate
  - pip install --upgrade pip
  - pip install -r requirements.txt

stages:
  - test
  - build
  # - deploy

test_stage:
  stage: test
  script:
    - echo "Running fictional test suite..."
    - python manage.py test
# variables:
#   DOCKER_HOST: tcp://docker:2375/
#   DOCKER_DRIVER: overlay2

build_stage:
  stage: build
  # before_script:
  #   - export IMAGE=$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME
  #   - export WEB_IMAGE=$IMAGE:web
  #   - export NGINX_IMAGE=$IMAGE:nginx
  script:
    - echo "Activating venv..."
    # - source $(pwd)/venv/bin/activate
    - echo "running eventual tests"
    # ensure server is up
    - curl -sSf http://localhost:8000 > /dev/null && echo "Server is Up"
    - sudo pkill python
    - deactivate
    - echo "building docker images"
